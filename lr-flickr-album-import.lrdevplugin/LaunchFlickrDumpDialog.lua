---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by andre.
--- DateTime: 20/06/2022 22:07
---
-- Access the Lightroom SDK namespaces.
local LrApplication = import 'LrApplication'
local LrFunctionContext = import 'LrFunctionContext'
local LrDialogs = import 'LrDialogs'
local LrLogger = import 'LrLogger'
local LrTasks = import 'LrTasks'
local LrFileUtils = import 'LrFileUtils'
local LrProgressScope = import 'LrProgressScope'
local JSON = require('json')
local myLogger = LrLogger('libraryLogger')
local rootPath = ""
local photocache = {}
myLogger:enable("logfile")


local loadPhoto = function(photoId)
    if photocache[photoId] == nil then
        local path = rootPath .. "/photo_" .. photoId .. ".json"
        if (LrFileUtils.exists(path)) then
            local content = LrFileUtils.readFile(path)
            photocache[photoId] = JSON:decode(content)
        end
    end
    return photocache[photoId]
end

local processAlbum = function(album, catalog, catalogPhotos, parentProgress, range)
    myLogger:info(album.title)
    catalog:withWriteAccessDo("Creating album " .. album.title, function(context)
        local childProgress = LrProgressScope({
            parent = parentProgress,
            caption = album.title,
            parentEndRange = range
        })
        childProgress:attachToFunctionContext(context)
        local collection = catalog:createCollection(album.title, nil, true)
        if (collection ~= nil) then
            local photosToAdd = {}
            for _, photoId in pairs(album.photos) do
                local photo = loadPhoto(photoId)
                if photo ~= nil then
                    local photoname = photo.original:match("^.*/(.*)$")
                    local lrphoto = catalogPhotos[photoname]
                    if (lrphoto == nil) then
                        lrphoto = catalogPhotos[photoId]
                    end
                    if (lrphoto ~= nil) then
                        myLogger:info("Adding photo " .. photoname)
                        table.insert(photosToAdd, lrphoto)
                    else
                        myLogger:warn("Unable to load photo data for " .. photoId .. " (" .. photoname .. ")")
                    end
                else
                    myLogger:warn("Unable to load photo data for " .. photoId)
                end
            end
            collection:addPhotos(photosToAdd)
        end
    end)
end

local function getCatalogPhotos(catalog)
    local photos = catalog:getAllPhotos()
    local photosByName = {}
    for _, photo in ipairs(photos) do
        local name = photo:getFormattedMetadata("fileName")
        photosByName[name] = photo
        local numberAtStart = name:match("^(%d+)")
        if (numberAtStart ~= nil) then
            photosByName[numberAtStart] = photo
        end
        local numberAtEnd = name:match("_(%d+)_o.*")
        if (numberAtEnd ~= nil) then
            photosByName[numberAtEnd] = photo
        end
        LrTasks.yield()
    end
    for name, _ in pairs(photosByName) do
        myLogger:debug("Registered photo " .. name)
    end
    return photosByName
end


local function showDialog()
    LrFunctionContext.callWithContext("showDialog", function(context)
        local path = LrDialogs.runOpenPanel {
            title = "Set Path",
            canChooseDirectories = true,
            allowsMultipleSelection = false,
        }
        rootPath = path[1]
        if (rootPath ~= nil and LrFileUtils.exists(rootPath .. "/albums.json")) then
            local rawalbumdata = LrFileUtils.readFile(rootPath .. "/albums.json")
            local albumdata = JSON:decode(rawalbumdata)
            local catalog = LrApplication.activeCatalog()
            local catalogPhotos = getCatalogPhotos(catalog)
            local position = 0
            local length = #(albumdata.albums)
            local progressScope = LrProgressScope({ title = "Importing Flickr Albums"})
            progressScope:attachToFunctionContext(context)
            myLogger:debug("We have to process " .. length .. " albums")
            for _, album in pairs(albumdata.albums) do
                position = position + 1
                processAlbum(album, catalog, catalogPhotos, progressScope, position / length)
            end
        end
    end)
end

LrTasks.startAsyncTask(showDialog, "Import Flickr")
